<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.zju.gislab.SCSServices.mapper.ScsUsersMapper">
    <resultMap id="BaseResultMap" type="cn.edu.zju.gislab.SCSServices.po.ScsUsers">
        <id column="USERNAME" property="username" jdbcType="OTHER"/>
        <result column="PASSWORD" property="password" jdbcType="OTHER"/>
        <result column="GROUP_ID" property="groupId" jdbcType="DECIMAL"/>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="cn.edu.zju.gislab.SCSServices.po.ScsUsers" extends="BaseResultMap">
        <result column="GRANTS" property="grants" jdbcType="DECIMAL"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    USERNAME, PASSWORD, GROUP_ID
  </sql>
    <sql id="Blob_Column_List">
    GRANTS
  </sql>
    <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs"
            parameterType="cn.edu.zju.gislab.SCSServices.po.ScsUsersExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from SCS_USERS
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="cn.edu.zju.gislab.SCSServices.po.ScsUsersExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from SCS_USERS
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from SCS_USERS
        where USERNAME = #{username,jdbcType=OTHER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from SCS_USERS
    where USERNAME = #{username,jdbcType=OTHER}
  </delete>
    <delete id="deleteByExample" parameterType="cn.edu.zju.gislab.SCSServices.po.ScsUsersExample">
        delete from SCS_USERS
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.edu.zju.gislab.SCSServices.po.ScsUsers">
    insert into SCS_USERS (USERNAME, PASSWORD, GROUP_ID, 
      GRANTS)
    values (#{username,jdbcType=OTHER}, #{password,jdbcType=OTHER}, #{groupId,jdbcType=DECIMAL}, 
      #{grants,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="cn.edu.zju.gislab.SCSServices.po.ScsUsers">
        insert into SCS_USERS
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="username != null">
                USERNAME,
            </if>
            <if test="password != null">
                PASSWORD,
            </if>
            <if test="groupId != null">
                GROUP_ID,
            </if>
            <if test="grants != null">
                GRANTS,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="username != null">
                #{username,jdbcType=OTHER},
            </if>
            <if test="password != null">
                #{password,jdbcType=OTHER},
            </if>
            <if test="groupId != null">
                #{groupId,jdbcType=DECIMAL},
            </if>
            <if test="grants != null">
                #{grants,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.edu.zju.gislab.SCSServices.po.ScsUsersExample"
            resultType="java.lang.Integer">
        select count(*) from SCS_USERS
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update SCS_USERS
        <set>
            <if test="record.username != null">
                USERNAME = #{record.username,jdbcType=OTHER},
            </if>
            <if test="record.password != null">
                PASSWORD = #{record.password,jdbcType=OTHER},
            </if>
            <if test="record.groupId != null">
                GROUP_ID = #{record.groupId,jdbcType=DECIMAL},
            </if>
            <if test="record.grants != null">
                GRANTS = #{record.grants,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update SCS_USERS
        set USERNAME = #{record.username,jdbcType=OTHER},
        PASSWORD = #{record.password,jdbcType=OTHER},
        GROUP_ID = #{record.groupId,jdbcType=DECIMAL},
        GRANTS = #{record.grants,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update SCS_USERS
        set USERNAME = #{record.username,jdbcType=OTHER},
        PASSWORD = #{record.password,jdbcType=OTHER},
        GROUP_ID = #{record.groupId,jdbcType=DECIMAL}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.edu.zju.gislab.SCSServices.po.ScsUsers">
        update SCS_USERS
        <set>
            <if test="password != null">
                PASSWORD = #{password,jdbcType=OTHER},
            </if>
            <if test="groupId != null">
                GROUP_ID = #{groupId,jdbcType=DECIMAL},
            </if>
            <if test="grants != null">
                GRANTS = #{grants,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where USERNAME = #{username,jdbcType=OTHER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.edu.zju.gislab.SCSServices.po.ScsUsers">
        update SCS_USERS
        set PASSWORD = #{password,jdbcType=OTHER},
        <if test="groupId != null">
            GROUP_ID = #{groupId,jdbcType=DECIMAL},
        </if>
        GRANTS = #{grants,jdbcType=LONGVARCHAR}
        where USERNAME = #{username,jdbcType=OTHER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.edu.zju.gislab.SCSServices.po.ScsUsers">
    update SCS_USERS
    set PASSWORD = #{password,jdbcType=OTHER},
      GROUP_ID = #{groupId,jdbcType=DECIMAL}
    where USERNAME = #{username,jdbcType=OTHER}
  </update>

    <select id="selectBySingleStr" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    ${sqlStr}
  </select>
</mapper>